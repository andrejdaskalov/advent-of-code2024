package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
)

func ReadFromFile(path string) [][]int {
	file, err := os.Open(path)
	if err != nil {
		log.Fatal("file not present.")
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)

	inputList := make([][]int, 0, 1000)

	for scanner.Scan() {
		line := scanner.Text()
		split := strings.Split(line, " ")
		splitInts := make([]int, 0, 10)
		for _, val := range split {
			intVal, _ := strconv.Atoi(val)
			splitInts = append(splitInts, intVal)
		}
		inputList = append(inputList, splitInts)
	}

	return inputList
}

func CheckOrder(rep []int) bool {
	if rep[0] == rep[1] {
		return false
	}
	isAsc := rep[0] < rep[1]
	for i := 1; i < len(rep)-1; i++ {
		if isAsc && rep[i] >= rep[i+1] {
			return false
		}
		if !isAsc && rep[i] <= rep[i+1] {
			return false
		}
	}
	return true
}

func absDiff(num1 int, num2 int) int {
	if num1 >= num2 {
		return num1 - num2
	} else {
		return num2 - num1
	}
}

func CheckVariance(rep []int) bool {

	for i := 0; i < len(rep)-1; i++ {
		variance := absDiff(rep[i], rep[i+1])
		if variance < 1 || variance > 3 {
			return false
		}
	}
	return true
}

// Part 1
func CountSafe(input [][]int) int {
	safe := 0
	for _, row := range input {
		order := CheckOrder(row)
		variance := CheckVariance(row)

		if order && variance {
			safe++
		}
	}
	return safe
}

func CheckVarianceWithTolerance(rep []int, tolerance int) int {
	if len(rep) < 2 {
		return tolerance
	}
	for i := 0; i < len(rep)-1; i++ {
		variance := absDiff(rep[i], rep[i+1])
		if variance < 1 || variance > 3 {
			new_rep := make([]int, 0, len(rep)-1)
			new_rep = append(new_rep, rep[:i]...)
			new_rep = append(new_rep, rep[i+1:]...)
			return CheckVarianceWithTolerance(new_rep, tolerance-1)
		}
	}
	last_idx := len(rep) - 1
	variance := absDiff(rep[last_idx-1], rep[last_idx])
	if variance < 1 || variance > 3 {
		return tolerance - 1
	}
	return tolerance
}

func SliceIsAsc(slc []int) bool {
	sum := 0
	diffs := make([]int, 0, len(slc)-1)
	for i := 0; i < len(slc)-1; i++ {
		diffs = append(diffs, (slc[i] - slc[i+1]))
	}
	for _, e := range diffs {
		sum += e
	}
	sum /= len(slc)
	return sum < 0
}

func CheckOrderWithTolerance(rep []int, tolerance int) int {
	if len(rep) < 2 || tolerance < 0 {
		return tolerance
	}
	// if rep[0] == rep[1] {
	// 	new_rep := make([]int, 0, len(rep)-1)
	// 	new_rep = rep[1:]
	// 	return CheckOrderWithTolerance(new_rep, tolerance-1)
	// }
	// isAsc := rep[0] < rep[1]
	isAsc := SliceIsAsc(rep)
	for i := 0; i < len(rep)-1; i++ {
		if isAsc && rep[i] >= rep[i+1] {
			new_rep := make([]int, 0, len(rep)-1)
			new_rep = append(new_rep, rep[:i]...)
			new_rep = append(new_rep, rep[i+1:]...)
			return CheckOrderWithTolerance(new_rep, tolerance-1)
		}
		if !isAsc && rep[i] <= rep[i+1] {
			new_rep := make([]int, 0, len(rep)-1)
			new_rep = append(new_rep, rep[:i]...)
			new_rep = append(new_rep, rep[i+1:]...)
			return CheckOrderWithTolerance(new_rep, tolerance-1)
		}
	}
	last_idx := len(rep) - 1
	if isAsc && rep[last_idx-1] >= rep[last_idx] {
		return tolerance - 1
	}
	if !isAsc && rep[last_idx-1] <= rep[last_idx] {
		return tolerance - 1
	}
	return tolerance
}

func CountSafeWithTolerance(input [][]int) int {
	safe := 0
	for _, row := range input {
		order_tolerance := CheckOrderWithTolerance(row, 1)
		variance_tolerance := CheckVarianceWithTolerance(row, 1)

		if order_tolerance >= 0 && variance_tolerance >= 0 {
			safe++
		}
	}
	return safe
}

func main() {
	input := ReadFromFile("day2-input.txt")

	// safeReports := CountSafe(input)
	// fmt.Printf("Number of safe reports: %d\n", safeReports)

	safeReports := CountSafeWithTolerance(input)
	fmt.Printf("Number of safe reports: %d\n", safeReports)
}
